// 🌐 Real-Time Collaborative To-Do Board (Frontend)
// ✅ Built with React + ES6 + Tailwind CSS + Socket.IO

// ✅ SETUP, CONTEXT, HOOKS, SERVICES (already included above)
// ✅ CONTINUED BELOW: UI COMPONENTS

// 📁 /src/pages/Login.jsx

// 📁 /src/pages/Register.jsx

// 📁 /src/components/TaskCard.jsx

// 📁 /src/components/ActivityLog.jsx

// 📁 /src/components/ConflictResolver.jsx
import React from "react";
import { updateTask } from "../services/task";
import { io } from "socket.io-client";
const socket = io(import.meta.env.VITE_API_URL);

const ConflictResolver = ({ conflict, onClose }) => {
  const { clientTask, serverTask } = conflict;

  const handleOverwrite = async () => {
    const res = await updateTask(clientTask._id, {
      ...clientTask,
      updatedAt: serverTask.updatedAt,
    });
    socket.emit("taskUpdated", res.data);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded shadow w-[400px]">
        <h3 className="text-lg font-bold mb-4">Conflict Detected</h3>
        <p className="text-sm text-red-600 mb-2">
          Server: {serverTask.description}
        </p>
        <p className="text-sm text-green-600 mb-2">
          Yours: {clientTask.description}
        </p>
        <div className="flex justify-end gap-2">
          <button onClick={onClose} className="px-4 py-2 bg-gray-300 rounded">
            Cancel
          </button>
          <button
            onClick={handleOverwrite}
            className="px-4 py-2 bg-blue-600 text-white rounded"
          >
            Overwrite
          </button>
        </div>
      </div>
    </div>
  );
};
export default ConflictResolver;

// 📁 /src/components/TaskModal.jsx
import React, { useEffect, useState } from "react";
import { createTask, updateTask, smartAssign } from "../services/task";
import { io } from "socket.io-client";
const socket = io(import.meta.env.VITE_API_URL);

const TaskModal = ({ task, onClose, setConflict }) => {
  const [form, setForm] = useState({
    title: "",
    description: "",
    status: "Todo",
  });

  useEffect(() => {
    if (task) setForm(task);
  }, [task]);

  if (!task) return null;

  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSave = async () => {
    try {
      let res;
      if (form._id) {
        res = await updateTask(form._id, form);
        socket.emit("taskUpdated", res.data);
      } else {
        res = await createTask(form);
        socket.emit("taskCreated", res.data);
      }
      onClose();
    } catch (err) {
      if (err.response?.status === 409) setConflict(err.response.data);
    }
  };

  const handleSmartAssign = async () => {
    const res = await smartAssign(form._id);
    socket.emit("taskUpdated", res.data);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded shadow w-96">
        <h3 className="text-lg font-bold mb-4">Edit Task</h3>
        <input
          name="title"
          className="w-full mb-3 p-2 border rounded"
          placeholder="Title"
          value={form.title}
          onChange={handleChange}
        />
        <textarea
          name="description"
          className="w-full mb-3 p-2 border rounded"
          placeholder="Description"
          value={form.description}
          onChange={handleChange}
        />
        <select
          name="status"
          className="w-full mb-3 p-2 border rounded"
          value={form.status}
          onChange={handleChange}
        >
          <option value="Todo">Todo</option>
          <option value="In Progress">In Progress</option>
          <option value="Done">Done</option>
        </select>
        <div className="flex gap-2 justify-end">
          <button onClick={onClose} className="px-4 py-2 bg-gray-300 rounded">
            Cancel
          </button>
          <button
            onClick={handleSmartAssign}
            className="px-4 py-2 bg-purple-500 text-white rounded"
          >
            Smart Assign
          </button>
          <button
            onClick={handleSave}
            className="px-4 py-2 bg-blue-600 text-white rounded"
          >
            Save
          </button>
        </div>
      </div>
    </div>
  );
};
export default TaskModal;

// 📁 /src/components/KanbanBoard.jsx
import React, { useEffect, useState } from "react";
import { fetchTasks } from "../services/task";
import useSocket from "../hooks/useSocket";
import { useAuth } from "../context/AuthContext";
import TaskCard from "./TaskCard";
import TaskModal from "./TaskModal";
import ActivityLog from "./ActivityLog";
import ConflictResolver from "./ConflictResolver";

const KanbanBoard = () => {
  const [tasks, setTasks] = useState([]);
  const [selectedTask, setSelectedTask] = useState(null);
  const [conflict, setConflict] = useState(null);
  const { logout } = useAuth();

  useSocket(setTasks);

  useEffect(() => {
    fetchTasks().then((res) => setTasks(res.data));
  }, []);

  const statuses = ["Todo", "In Progress", "Done"];

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-semibold">Task Board</h2>
        <button
          onClick={logout}
          className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
        >
          Logout
        </button>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {statuses.map((status) => (
          <div key={status} className="bg-gray-200 rounded p-4 min-h-[300px]">
            <h3 className="text-lg font-semibold mb-2">{status}</h3>
            {tasks
              .filter((t) => t.status === status)
              .map((task) => (
                <TaskCard
                  key={task._id}
                  task={task}
                  onClick={setSelectedTask}
                />
              ))}
          </div>
        ))}
      </div>

      <TaskModal
        task={selectedTask}
        onClose={() => setSelectedTask(null)}
        setConflict={setConflict}
      />
      {conflict && (
        <ConflictResolver
          conflict={conflict}
          onClose={() => setConflict(null)}
        />
      )}

      <ActivityLog />
    </div>
  );
};
export default KanbanBoard;
